import logging
from flask import Blueprint, request, jsonify
from datetime import datetime, timezone
from src.firebase_config import db

chatbot_bp = Blueprint("chatbot", __name__)
logger = logging.getLogger(__name__)

# üîπ Therapeutic chatbot conversation
@chatbot_bp.route("/chat", methods=["POST"])
def chat_with_ai():
    try:
        logger.info("üîÑ Chat endpoint called")
        data = request.get_json(force=True, silent=False)
        logger.info(f"üì® Received data: {data}")

        if not data or "message" not in data or "user_id" not in data:
            logger.error("‚ùå Missing message or user_id in request")
            return jsonify({"error": "Meddelande och anv√§ndar-ID kr√§vs!"}), 400

        user_message = data["message"].strip()
        user_id = data["user_id"].strip()

        logger.info(f"üë§ Processing chat for user: {user_id}, message length: {len(user_message)}")

        if not user_message or not user_id:
            logger.error("‚ùå Empty message or user_id")
            return jsonify({"error": "Meddelande och anv√§ndar-ID f√•r inte vara tomma!"}), 400

        # Get conversation history (last 10 messages)
        conversation_ref = db.collection("users").document(user_id).collection("conversations")
        recent_messages = list(conversation_ref.order_by("timestamp", direction="DESCENDING").limit(10).stream())

        # Build conversation context
        conversation_history = []
        for msg_doc in reversed(recent_messages):
            msg_data = msg_doc.to_dict()
            conversation_history.append({
                "role": msg_data.get("role"),
                "content": msg_data.get("content")
            })

        # Generate AI response with enhanced features
        logger.info(f"ü§ñ Generating AI response for message: '{user_message[:50]}...'")
        from src.utils.ai_services import ai_services

        try:
            ai_response = generate_enhanced_therapeutic_response(user_message, conversation_history)
            logger.info(f"‚úÖ AI response generated successfully, length: {len(ai_response.get('response', ''))}")
        except Exception as ai_error:
            logger.warning(f"‚ö†Ô∏è AI response generation failed, using fallback: {str(ai_error)}")
            ai_response = generate_fallback_response(user_message)

        # Save conversation to database
        timestamp = datetime.now(timezone.utc).isoformat()

        # Save user message
        conversation_ref.document(f"user_{timestamp}").set({
            "role": "user",
            "content": user_message,
            "timestamp": timestamp
        })

        # Check if we should suggest AI features based on conversation context
        ai_feature_suggestions = generate_ai_feature_suggestions(
            user_message, conversation_history, ai_response
        )

        # Save AI response
        conversation_ref.document(f"ai_{timestamp}").set({
            "role": "assistant",
            "content": ai_response["response"],
            "timestamp": timestamp,
            "emotions_detected": ai_response.get("emotions_detected", []),
            "suggested_actions": ai_response.get("suggested_actions", []),
            "crisis_detected": ai_response.get("crisis_detected", False),
            "crisis_analysis": ai_response.get("crisis_analysis", {}),
            "ai_generated": ai_response.get("ai_generated", True),
            "model_used": ai_response.get("model_used", "unknown"),
            "ai_feature_suggestions": ai_feature_suggestions
        })

        logger.info(f"‚úÖ Chatt-konversation sparad f√∂r anv√§ndare {user_id}")

        return jsonify({
            "response": ai_response["response"],
            "emotions_detected": ai_response.get("emotions_detected", []),
            "suggested_actions": ai_response.get("suggested_actions", []),
            "exercise_recommendations": ai_response.get("exercise_recommendations", []),
            "crisis_detected": ai_response.get("crisis_detected", False),
            "crisis_analysis": ai_response.get("crisis_analysis", {}),
            "ai_generated": ai_response.get("ai_generated", True),
            "model_used": ai_response.get("model_used", "unknown"),
            "sentiment_analysis": ai_response.get("sentiment_analysis", {}),
            "ai_feature_suggestions": ai_feature_suggestions
        }), 200

    except Exception as e:
        logger.exception(f"üî• Fel vid AI-chatt: {e}")
        return jsonify({"error": "Ett internt fel uppstod vid chatt-hantering."}), 500

def generate_enhanced_therapeutic_response(user_message: str, conversation_history: list) -> dict:
    """
    Generate enhanced therapeutic AI response with crisis detection and advanced features
    """
    from src.utils.ai_services import ai_services

    # Use the enhanced AI services method
    ai_response = ai_services.generate_therapeutic_conversation(
        user_message,
        conversation_history
    )

    # Add suggested actions if not in crisis
    if not ai_response.get("crisis_detected", False):
        sentiment_analysis = ai_response.get("sentiment_analysis", {})
        suggested_actions = generate_suggested_actions(sentiment_analysis)

        ai_response["suggested_actions"] = suggested_actions
        ai_response["emotions_detected"] = sentiment_analysis.get("emotions", [])

    return ai_response

def generate_ai_feature_suggestions(user_message: str, conversation_history: list, ai_response: dict) -> dict:
    """Generate suggestions for using advanced AI features based on conversation context"""
    suggestions = {
        "suggest_story": False,
        "suggest_forecast": False,
        "story_reason": "",
        "forecast_reason": ""
    }

    # Analyze conversation context to determine if AI features would be helpful
    message_lower = user_message.lower()
    sentiment = ai_response.get("sentiment_analysis", {}).get("sentiment", "NEUTRAL")

    # Suggest therapeutic story for:
    # - Users expressing interest in stories or narratives
    # - Users going through emotional challenges
    # - Users seeking deeper understanding of their patterns
    story_keywords = ["ber√§ttelse", "historia", "story", "fortelling", "f√∂rst√•", "m√∂nster", "utveckling", "resa"]
    emotional_challenge_keywords = ["sv√•rt", "utmaning", "f√∂r√§ndring", "utveckla", "v√§xa", "l√§ra"]

    if any(keyword in message_lower for keyword in story_keywords) or \
       (sentiment in ["NEGATIVE", "NEUTRAL"] and any(keyword in message_lower for keyword in emotional_challenge_keywords)):
        suggestions["suggest_story"] = True
        if any(keyword in message_lower for keyword in story_keywords):
            suggestions["story_reason"] = "Du verkar intresserad av ber√§ttelser f√∂r att f√∂rst√• dina k√§nslor b√§ttre"
        else:
            suggestions["story_reason"] = "En personlig ber√§ttelse kan hj√§lpa dig att se din resa och hitta hopp"

    # Suggest mood forecasting for:
    # - Users asking about future mood or patterns
    # - Users with consistent mood logging
    # - Users expressing concern about future emotional state
    forecast_keywords = ["framtiden", "prognos", "f√∂rutsp√•", "trender", "m√∂nster", "future", "predict", "forecast"]
    concern_keywords = ["oroar", "bekymrad", "os√§ker", "r√§dd", "√§ngslig"]

    if any(keyword in message_lower for keyword in forecast_keywords) or \
       (len(conversation_history) > 5 and any(keyword in message_lower for keyword in concern_keywords)):
        suggestions["suggest_forecast"] = True
        if any(keyword in message_lower for keyword in forecast_keywords):
            suggestions["forecast_reason"] = "Du kan f√• en AI-driven prognos √∂ver dina hum√∂rtrender"
        else:
            suggestions["forecast_reason"] = "En hum√∂rprognos kan ge insikt i kommande utmaningar och m√∂jligheter"

    return suggestions

def generate_suggested_actions(sentiment_analysis: dict) -> list:
    """Generate suggested actions based on sentiment analysis"""
    sentiment = sentiment_analysis.get("sentiment", "NEUTRAL")
    emotions = sentiment_analysis.get("emotions", [])

    actions = []

    if sentiment == "NEGATIVE":
        actions.extend([
            "Ta n√•gra djupa andetag",
            "G√• en kort promenad",
            "Prata med en v√§n om dina k√§nslor"
        ])
        if "sadness" in emotions:
            actions.append("Skriv ner tre saker du √§r tacksam f√∂r")
        if "anger" in emotions:
            actions.append("Prova progressiv muskelavslappning")
        if "fear" in emotions:
            actions.append("Anv√§nd grounding-tekniker (5-4-3-2-1)")

    elif sentiment == "POSITIVE":
        actions.extend([
            "Fira dina positiva k√§nslor",
            "Dela gl√§djen med andra",
            "Spara detta √∂gonblick i ditt minne"
        ])

    else:  # NEUTRAL
        actions.extend([
            "G√∂r n√•got du tycker om",
            "Ta en paus fr√•n sk√§rmar",
            "Ut√∂va mindfulness"
        ])

    return actions[:3]  # Return max 3 actions

def generate_fallback_response(user_message: str) -> dict:
    """Enhanced professional therapeutic fallback response when AI is not available"""
    from src.utils.ai_services import ai_services

    # First, try to analyze sentiment even in fallback mode
    try:
        sentiment_analysis = ai_services.analyze_sentiment(user_message)
        emotions = sentiment_analysis.get("emotions", [])
        sentiment = sentiment_analysis.get("sentiment", "NEUTRAL")
    except Exception:
        sentiment = "NEUTRAL"
        emotions = []

    message_lower = user_message.lower()

    # Professional therapeutic responses based on detected emotions and content
    if any(word in message_lower for word in ["stressad", "stress", "orolig", "√§ngslig", "nerv√∂s", "sp√§nd"]):
        response = """Jag f√∂rst√•r att du k√§nner dig stressad just nu. Stress √§r en mycket vanlig reaktion p√• dagens snabba tempo och h√∂ga krav.

Ett bra f√∂rsta steg √§r att aktivera kroppens avslappningsrespons genom djupandning: Andas in l√•ngsamt genom n√§san i 4 sekunder, h√•ll andan i 4 sekunder, andas ut genom munnen i 6 sekunder.

Vad upplever du som mest stressande i din situation? Att prata om det kan ofta hj√§lpa att f√• perspektiv."""
        actions = [
            "Djupandning: 4-4-6-tekniken",
            "Kort promenad i naturen",
            "Prioritera dagens viktigaste uppgifter"
        ]

    elif any(word in message_lower for word in ["ledsen", "sorg", "deppig", "nedst√§md", "tom", "hoppl√∂s"]):
        response = """Det √§r modigt av dig att dela att du k√§nner dig ledsen. Sorg och nedst√§mdhet √§r naturliga delar av livet, men de kan k√§nnas mycket tunga att b√§ra ensam.

Kom ih√•g att alla k√§nslor √§r tillf√§lliga och att de kommer att f√∂r√§ndras. Ett viktigt f√∂rsta steg √§r att vara v√§nlig mot dig sj√§lv - precis som du skulle vara mot en n√§ra v√§n som m√•dde d√•ligt.

Vad har h√§nt som f√•tt dig att k√§nna s√• h√§r? Att f√• uttrycka sina k√§nslor √§r ofta det f√∂rsta steget mot l√§kning."""
        actions = [
            "Var v√§nlig mot dig sj√§lv - ingen f√∂rv√§ntar sig perfektion",
            "Skriv ner tre saker du √§r tacksam f√∂r idag",
            "Kontakta en v√§n eller familjemedlem f√∂r st√∂d"
        ]

    elif any(word in message_lower for word in ["arg", "rasande", "irriterad", "frustrerad", "ilsken"]):
        response = """Ilska √§r en viktig signal fr√•n din kropp om att n√•got beh√∂ver uppm√§rksammas eller f√∂r√§ndras. Den inneh√•ller ofta v√§rdefull information om vad som √§r viktigt f√∂r dig.

Ist√§llet f√∂r att f√∂rs√∂ka undertrycka ilskan, kan det vara hj√§lpsamt att utforska vad den f√∂rs√∂ker ber√§tta. √Ñr det en situation som beh√∂ver f√∂r√§ndras, eller en gr√§ns som beh√∂ver s√§ttas?

Vad tror du ligger bakom dina k√§nslor av ilska? Att f√∂rst√• roten till dem kan hj√§lpa dig att hantera dem b√§ttre."""
        actions = [
            "Fysisk aktivitet f√∂r att sl√§ppa p√• √•ngest",
            "Skriv ner dina k√§nslor utan att censurera",
            "Progressiv muskelavslappning"
        ]

    elif any(word in message_lower for word in ["glad", "lycklig", "n√∂jd", "tacksam", "harmonisk"]):
        response = """Vad underbart att h√∂ra att du k√§nner dig glad! Positiva k√§nslor √§r viktiga att uppm√§rksamma och fira - de ger oss energi och motivation att forts√§tta fram√•t.

Gl√§dje och lycka √§r ofta resultatet av meningsfulla relationer, aktiviteter vi v√§rdes√§tter, och en k√§nsla av att leva i linje med v√•ra v√§rderingar.

Vad har bidragit till dina positiva k√§nslor idag? Att reflektera √∂ver det kan hj√§lpa dig att skapa mer av det i ditt liv."""
        actions = [
            "Fira denna positiva k√§nsla medvetet",
            "Dela din gl√§dje med andra",
            "Spara detta √∂gonblick som ett positivt minne"
        ]

    elif any(word in message_lower for word in ["tr√∂tt", "utmattad", "utbr√§nd", "energil√∂s"]):
        response = """Tr√∂tthet och utmattning √§r signaler fr√•n kroppen om att du beh√∂ver √•terh√§mtning. I dagens samh√§lle √§r det l√§tt att st√§ndigt vara "p√•", men √•terh√§mtning √§r lika viktigt som aktivitet.

Din kropp och sj√§l beh√∂ver tid f√∂r vila och √•terh√§mtning. Det √§r inte en lyx - det √§r en n√∂dv√§ndighet f√∂r att fungera optimalt.

Hur ser din s√∂mn och √•terh√§mtning ut just nu? Sm√• f√∂r√§ndringar i rutiner kan ofta g√∂ra stor skillnad."""
        actions = [
            "Prioritera 7-8 timmars s√∂mn per natt",
            "Ta regelbundna pauser under dagen",
            "√ñva p√• att s√§ga nej till icke-prioriterade uppgifter"
        ]

    elif any(word in message_lower for word in ["ensam", "isolera", "saknar", "l√§ngtar"]):
        response = """K√§nslan av ensamhet kan vara mycket sm√§rtsam, √§ven n√§r vi √§r omgivna av andra m√§nniskor. M√§nniskor √§r sociala varelser som beh√∂ver kontakt och tillh√∂righet f√∂r att m√• bra.

Det √§r viktigt att komma ih√•g att m√•nga andra k√§nner likadant, och att det finns s√§tt att bygga meningsfulla relationer. Sm√• steg som att n√• ut till andra kan g√∂ra stor skillnad.

Vad l√§ngtar du efter i dina relationer? Att f√∂rst√• det kan hj√§lpa dig att ta de f√∂rsta stegen mot mer kontakt."""
        actions = [
            "N√• ut till en v√§n eller familjemedlem idag",
            "Delta i en aktivitet eller grupp som intresserar dig",
            "√ñva p√• att vara n√§rvarande i sociala situationer"
        ]

    elif any(word in message_lower for word in ["oro", "√§ngslan", "r√§dsla", "bekymmer"]):
        response = """Oro och √§ngslan √§r kroppens s√§tt att f√∂rs√∂ka skydda oss fr√•n potentiella hot. Problemet √§r att denna skyddsmekanism ibland aktiveras √§ven n√§r det inte finns n√•got verkligt hot.

Genom att l√§ra oss att skilja mellan konstruktiv oro (som motiverar oss att agera) och destruktiv oro (som bara skapar √•ngest) kan vi hantera dessa k√§nslor b√§ttre.

Vad oroar dig mest just nu? Att namnge oron √§r ofta det f√∂rsta steget mot att hantera den."""
        actions = [
            "Anv√§nd 5-4-3-2-1 grounding-tekniken",
            "Begr√§nsa \"oro-tid\" till en specifik period per dag",
            "Fokusera p√• det du kan kontrollera, inte det du inte kan"
        ]

    else:
        # General supportive response
        response = """Tack f√∂r att du delar dina tankar och k√§nslor med mig. Det √§r ett viktigt f√∂rsta steg i sj√§lvv√•rd och personlig utveckling.

Jag √§r h√§r f√∂r att lyssna utan att d√∂ma, och f√∂r att erbjuda st√∂d och v√§gledning baserat p√• evidensbaserade principer inom psykologi och mental h√§lsa.

Vad ligger dig varmast p√• hj√§rtat just nu? Att utforska dina k√§nslor och tankar tillsammans kan ofta ge v√§rdefulla insikter."""
        actions = [
            "Reflektera √∂ver dina k√§nslor genom att skriva dagbok",
            "√ñva mindfulness eller meditation dagligen",
            "S√∂k professionell hj√§lp om du beh√∂ver extra st√∂d"
        ]

    # Add emotion-specific insights if emotions were detected
    if emotions:
        emotion_insights = []
        if "sadness" in emotions:
            emotion_insights.append("Sorgbearbetning tar tid - var t√•lmodig med dig sj√§lv")
        if "anger" in emotions:
            emotion_insights.append("Ilska inneh√•ller ofta viktiga budskap om dina gr√§nser")
        if "fear" in emotions:
            emotion_insights.append("√Öngest √§r kroppens falska larmsignal - andas djupt")

        if emotion_insights:
            response += f"\n\n{emotion_insights[0]}"

    return {
        "response": response,
        "emotions_detected": emotions,
        "suggested_actions": actions,
        "ai_generated": False,
        "sentiment_analysis": {
            "sentiment": sentiment,
            "emotions": emotions
        }
    }

# üîπ Get conversation history
@chatbot_bp.route("/history", methods=["GET"])
def get_chat_history():
    try:
        user_id = request.args.get("user_id", "").strip()
        if not user_id:
            return jsonify({"error": "Anv√§ndar-ID kr√§vs!"}), 400

        # Get conversation history
        conversation_ref = db.collection("users").document(user_id).collection("conversations")
        messages = list(conversation_ref.order_by("timestamp").stream())

        conversation = []
        for msg_doc in messages:
            msg_data = msg_doc.to_dict()
            conversation.append({
                "role": msg_data.get("role"),
                "content": msg_data.get("content"),
                "timestamp": msg_data.get("timestamp"),
                "emotions_detected": msg_data.get("emotions_detected", []),
                "suggested_actions": msg_data.get("suggested_actions", []),
                "crisis_detected": msg_data.get("crisis_detected", False),
                "crisis_analysis": msg_data.get("crisis_analysis", {}),
                "ai_generated": msg_data.get("ai_generated", True),
                "model_used": msg_data.get("model_used", "unknown")
            })

        return jsonify({"conversation": conversation}), 200

    except Exception as e:
        logger.exception(f"üî• Fel vid h√§mtning av chatt-historik: {e}")
        return jsonify({"error": "Ett internt fel uppstod vid h√§mtning av chatt-historik."}), 500

# üîπ Mood Pattern Analysis
@chatbot_bp.route("/analyze-patterns", methods=["POST"])
def analyze_mood_patterns():
    """Analyze user's mood patterns and provide insights"""
    try:
        data = request.get_json(force=True, silent=False)
        if not data or "user_id" not in data:
            return jsonify({"error": "Anv√§ndar-ID kr√§vs!"}), 400

        user_id = data["user_id"].strip()

        if not user_id:
            return jsonify({"error": "Anv√§ndar-ID f√•r inte vara tomt!"}), 400

        # Get mood history from database
        from src.firebase_config import db
        mood_ref = db.collection("users").document(user_id).collection("moods")
        mood_docs = list(mood_ref.order_by("timestamp", direction="DESCENDING").limit(50).stream())

        mood_history = []
        for doc in mood_docs:
            mood_data = doc.to_dict()
            mood_history.append({
                "sentiment": mood_data.get("sentiment", "NEUTRAL"),
                "sentiment_score": mood_data.get("score", 0),
                "timestamp": mood_data.get("timestamp", ""),
                "note": mood_data.get("note", "")
            })

        # Use AI services for pattern analysis with fallback
        from src.utils.ai_services import ai_services

        try:
            logger.info(f"üìä Analyzing mood patterns for user {user_id}, {len(mood_history)} data points")
            pattern_analysis = ai_services.analyze_mood_patterns(mood_history)
            logger.info(f"‚úÖ Pattern analysis completed successfully")
        except Exception as pattern_error:
            logger.warning(f"‚ö†Ô∏è Pattern analysis failed, using fallback: {str(pattern_error)}")
            pattern_analysis = {
                "pattern_analysis": "Otillr√§cklig data f√∂r avancerad m√∂nsteranalys",
                "predictions": "Beh√∂ver mer data f√∂r prediktioner",
                "confidence": 0.0
            }

        return jsonify({
            "pattern_analysis": pattern_analysis,
            "data_points_analyzed": len(mood_history),
            "analysis_timestamp": datetime.now(timezone.utc).isoformat()
        }), 200

    except Exception as e:
        logger.exception(f"üî• Fel vid m√∂nsteranalys: {e}")
        return jsonify({"error": "Ett internt fel uppstod vid m√∂nsteranalys."}), 500

# üîπ CBT/Mindfulness Exercises
@chatbot_bp.route("/exercise", methods=["POST"])
def start_exercise():
    """Start a CBT or mindfulness exercise session"""
    try:
        data = request.get_json(force=True, silent=False)
        if not data or "user_id" not in data or "exercise_type" not in data:
            return jsonify({"error": "Anv√§ndar-ID och √∂vningstyp kr√§vs!"}), 400

        user_id = data["user_id"].strip()
        exercise_type = data["exercise_type"].strip()
        duration = data.get("duration", 5)  # Default 5 minutes

        if not user_id or not exercise_type:
            return jsonify({"error": "Anv√§ndar-ID och √∂vningstyp f√•r inte vara tomma!"}), 400

        # Generate exercise content based on type
        exercise_content = generate_exercise_content(exercise_type, duration)

        # Save exercise session to database
        timestamp = datetime.now(timezone.utc).isoformat()
        exercise_ref = db.collection("users").document(user_id).collection("exercises")

        exercise_ref.document(f"exercise_{timestamp}").set({
            "exercise_type": exercise_type,
            "duration": duration,
            "started_at": timestamp,
            "completed": False,
            "content": exercise_content
        })

        logger.info(f"‚úÖ Exercise started for user {user_id}: {exercise_type}")

        return jsonify({
            "exercise": exercise_content,
            "exercise_type": exercise_type,
            "duration": duration,
            "started_at": timestamp
        }), 200

    except Exception as e:
        logger.exception(f"üî• Fel vid √∂vningsstart: {e}")
        return jsonify({"error": "Ett internt fel uppstod vid √∂vningsstart."}), 500

@chatbot_bp.route("/exercise/<user_id>/<exercise_id>/complete", methods=["POST"])
def complete_exercise(user_id, exercise_id):
    """Mark an exercise as completed"""
    try:
        if not user_id or not exercise_id:
            return jsonify({"error": "Anv√§ndar-ID och √∂vnings-ID kr√§vs!"}), 400

        # Update exercise completion status
        exercise_ref = db.collection("users").document(user_id).collection("exercises").document(exercise_id)

        exercise_ref.update({
            "completed": True,
            "completed_at": datetime.now(timezone.utc).isoformat()
        })

        logger.info(f"‚úÖ Exercise completed for user {user_id}: {exercise_id}")

        return jsonify({"message": "√ñvning markerad som slutf√∂rd!"}), 200

    except Exception as e:
        logger.exception(f"üî• Fel vid √∂vningsslutf√∂rande: {e}")
        return jsonify({"error": "Ett internt fel uppstod vid √∂vningsslutf√∂rande."}), 500

def generate_exercise_content(exercise_type: str, duration: int) -> dict:
    """Generate content for different types of exercises"""

    exercises = {
        "breathing": {
            "title": "Andnings√∂vning - 4-7-8 Teknik",
            "description": "En enkel andningsteknik f√∂r att lugna ner dig och minska stress.",
            "steps": [
                "Sitt bekv√§mt med ryggen rak",
                "Andas in tyst genom n√§san i 4 sekunder",
                "H√•ll andan i 7 sekunder",
                "Andas ut ljudligt genom munnen i 8 sekunder",
                "Upprepa cykeln 4 g√•nger"
            ],
            "tips": "Fokusera p√• att g√∂ra utandningen l√§ngre √§n inandningen f√∂r att aktivera avslappningssystemet.",
            "benefits": "Minskar √•ngest, f√∂rb√§ttrar s√∂mn, lugnar nervsystemet"
        },

        "mindfulness": {
            "title": "Mindfulness - Kroppsskanning",
            "description": "En guidad meditation f√∂r att √∂ka medvetenheten om kroppen och n√§rvaron.",
            "steps": [
                "Ligg eller sitt bekv√§mt",
                "St√§ng √∂gonen och fokusera p√• andningen",
                "Skanna kroppen fr√•n t√•rna till huvudet",
                "L√§gg m√§rke till sp√§nningar utan att f√∂rs√∂ka √§ndra dem",
                "Andas in acceptans, andas ut sl√§pp"
            ],
            "tips": "Om tankar vandrar iv√§g, notera dem v√§nligt och √•terv√§nd till kroppen.",
            "benefits": "√ñkar kroppsmedvetenhet, minskar stress, f√∂rb√§ttrar s√∂mnkvalitet"
        },

        "cbt_thought_record": {
            "title": "KBT - Tankeinventering",
            "description": "En strukturerad metod f√∂r att utmana negativa tankem√∂nster.",
            "steps": [
                "Identifiera en negativ tanke eller √∂vertygelse",
                "Bed√∂m automatiskt hur mycket du tror p√• den (0-100%)",
                "S√∂k efter bevis f√∂r och emot tanken",
                "Formulera en mer balanserad alternativa tanke",
                "Bed√∂m hur mycket du tror p√• den nya tanken"
            ],
            "tips": "Var specifik med bevisen - anv√§nd konkreta exempel fr√•n ditt liv.",
            "benefits": "Bygger kritiskt t√§nkande, minskar kognitiv bias, f√∂rb√§ttrar k√§nsloreglering"
        },

        "gratitude": {
            "title": "Tacksamhets√∂vning",
            "description": "√ñva p√• att uppm√§rksamma positiva aspekter i livet.",
            "steps": [
                "Sitt bekv√§mt och slappna av",
                "T√§nk p√• tre saker du √§r tacksam f√∂r idag",
                "Beskriv varf√∂r du √§r tacksam f√∂r varje sak",
                "K√§nn k√§nslan av tacksamhet i kroppen",
                "Avsluta med ett leende"
            ],
            "tips": "B√∂rja med sm√• saker som ofta tas f√∂r givna - en varm s√§ng, rent vatten, v√§nliga ord.",
            "benefits": "√ñkar livstillfredsst√§llelse, minskar depression, bygger positiva relationer"
        },

        "progressive_relaxation": {
            "title": "Progressiv Muskelavslappning",
            "description": "En teknik f√∂r att medvetet sp√§nna och sl√§ppa muskler f√∂r djup avslappning.",
            "steps": [
                "Ligg bekv√§mt p√• rygg",
                "B√∂rja med f√∂tterna - sp√§nn t√•r och vader i 5 sekunder",
                "Sl√§pp sp√§nningen och k√§nn skillnaden",
                "Forts√§tt upp genom kroppen: vader, l√•r, mage, h√§nder, armar, axlar, ansikte",
                "Avsluta med n√•gra djupa andetag"
            ],
            "tips": "G√• systematiskt genom kroppen. Om du har ont n√•gonstans, var extra f√∂rsiktig.",
            "benefits": "Minskar muskelsp√§nningar, f√∂rb√§ttrar s√∂mn, minskar √•ngest"
        }
    }

    exercise = exercises.get(exercise_type, exercises["breathing"])

    return {
        "title": exercise["title"],
        "description": exercise["description"],
        "duration_minutes": duration,
        "steps": exercise["steps"],
        "tips": exercise["tips"],
        "benefits": exercise["benefits"],
        "instructions": f"Denna √∂vning tar cirka {duration} minuter. Ta din tid och var v√§nlig mot dig sj√§lv."
    }