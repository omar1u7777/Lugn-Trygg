name: 🚀 Deploy Lugn & Trygg

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # 🔍 Quality Assurance
  quality-check:
    name: 'Quality Assurance'
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web-app/package-lock.json

      - name: 📦 Install frontend dependencies
        run: |
          cd web-app
          npm ci

      - name: 🔍 Run linting
        run: |
          cd web-app
          npm run lint

      - name: 🧪 Run unit tests
        run: |
          cd web-app
          npm run test:coverage

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: ./web-app/coverage
          flags: frontend
          name: Frontend Coverage

      - name: ♿ Accessibility audit
        run: |
          cd web-app
          npm run test:a11y

      - name: ⚡ Performance check
        run: |
          cd web-app
          npm run lighthouse

  # 🔧 Backend Testing
  backend-test:
    name: 'Backend Tests'
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install backend dependencies
        run: |
          cd Backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🧪 Run backend tests
        run: |
          cd Backend
          python -m pytest --cov=. --cov-report=xml

      - name: 📊 Upload backend coverage
        uses: codecov/codecov-action@v3
        with:
          directory: ./Backend
          flags: backend
          name: Backend Coverage

  # 🏗️ Build & Bundle
  build:
    name: 'Build Application'
    runs-on: ubuntu-latest
    needs: [quality-check, backend-test]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web-app/package-lock.json

      - name: 📦 Install dependencies
        run: |
          cd web-app
          npm ci

      - name: 🏗️ Build frontend
        run: |
          cd web-app
          npm run build
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL }}
          VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}

      - name: 📦 Build backend
        run: |
          cd Backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          python -c "import main; print('Backend build successful')"

      - name: 📦 Build mobile app
        run: |
          cd lugn-trygg-mobile
          npm ci
          npm run build
        continue-on-error: true

      - name: 📦 Build desktop app
        run: |
          cd web-app
          npm run build:electron
        continue-on-error: true

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            web-app/dist/
            Backend/
            lugn-trygg-mobile/build/
          retention-days: 7

  # 🚀 Deploy to Staging
  deploy-staging:
    name: 'Deploy to Staging'
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' || github.event_name == 'pull_request'
    environment: staging
    steps:
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: 🚀 Deploy frontend to Vercel (Staging)
        run: |
          cd web-app
          npx vercel --prod=false --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: 🚀 Deploy backend to Render (Staging)
        run: |
          curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK_STAGING }}

      - name: 🧪 Run E2E tests on staging
        run: |
          cd web-app
          npm run test:e2e:staging

  # 🚀 Deploy to Production
  deploy-production:
    name: 'Deploy to Production'
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: 🚀 Deploy frontend to Vercel (Production)
        run: |
          cd web-app
          npx vercel --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: 🚀 Deploy backend to Render (Production)
        run: |
          curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK_PRODUCTION }}

      - name: 📱 Deploy mobile app
        run: |
          cd lugn-trygg-mobile
          npx eas build --platform all --profile production
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: 🖥️ Deploy desktop app
        run: |
          cd web-app
          npx electron-builder --publish=always
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📊 Performance monitoring
        run: |
          curl -X POST ${{ secrets.DATADOG_WEBHOOK }} \
            -H "Content-Type: application/json" \
            -d '{"event": "deployment", "environment": "production", "version": "'$GITHUB_SHA'"}'

  # 📊 Post-deployment monitoring
  monitoring:
    name: 'Post-deployment Monitoring'
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: 🏥 Health check
        run: |
          # Wait for deployment to be ready
          sleep 300

          # Check frontend health
          curl -f ${{ secrets.FRONTEND_URL }}/health || exit 1

          # Check backend health
          curl -f ${{ secrets.BACKEND_URL }}/health || exit 1

      - name: ⚡ Performance test
        run: |
          npx lighthouse ${{ secrets.FRONTEND_URL }} --output=json --output-path=./lighthouse-results.json

      - name: 📈 Send deployment notification
        run: |
          curl -X POST ${{ secrets.SLACK_WEBHOOK }} \
            -H "Content-Type: application/json" \
            -d '{
              "text": "🚀 Lugn & Trygg deployed to production!",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "🚀 Deployment Successful"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Environment:* Production"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Version:* '${{ github.sha }}'"
                    }
                  ]
                }
              ]
            }'

  # 🔄 Rollback on failure
  rollback:
    name: 'Rollback on Failure'
    runs-on: ubuntu-latest
    needs: [deploy-production, monitoring]
    if: failure() && github.ref == 'refs/heads/main'
    steps:
      - name: 🚨 Trigger rollback
        run: |
          echo "Deployment failed, triggering rollback..."
          # Implement rollback logic here
          curl -X POST ${{ secrets.ROLLBACK_WEBHOOK }}

      - name: 📢 Send failure notification
        run: |
          curl -X POST ${{ secrets.SLACK_WEBHOOK }} \
            -H "Content-Type: application/json" \
            -d '{
              "text": "❌ Deployment failed - Rollback initiated",
              "attachments": [
                {
                  "color": "danger",
                  "fields": [
                    {
                      "title": "Environment",
                      "value": "Production",
                      "short": true
                    },
                    {
                      "title": "Commit",
                      "value": "'${{ github.sha }}'",
                      "short": true
                    }
                  ]
                }
              ]
            }'